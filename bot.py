import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ChatType
import aiohttp
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv(".env", override=True)
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEB_APP_FRONTEND_URL = os.getenv("WEB_APP_FRONTEND_URL")
BACKEND_API_URL = os.getenv("BACKEND_API_URL")
# WEB_APP_FRONTEND_URL="https://splitandpay.serveo.net"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


@dp.message(Command('start'))
async def start_handler(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º:",
        reply_markup=keyboard
    )

@dp.message(lambda msg: msg.contact is not None)
async def handle_contact(message: types.Message):
    user = message.from_user
    contact = message.contact

    user_data = {
        "tg_id": str(user.id),
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "phone": contact.phone_number
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
    async with aiohttp.ClientSession() as session:
        print(BACKEND_API_URL+"/users/auth")
        async with session.post(BACKEND_API_URL+"/users/auth", json=user_data) as response:
            print(response)
            if response.status != 200:
                text = await response.text()
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status} {text}")




async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
